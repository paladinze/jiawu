module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateEvent {
  count: Int!
}

type AggregatePeople {
  count: Int!
}

type AggregateShip {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Event {
  id: ID!
  title: String!
  subtitle: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type EventConnection {
  pageInfo: PageInfo!
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  id: ID
  title: String!
  subtitle: String!
}

type EventEdge {
  node: Event!
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  subtitle_ASC
  subtitle_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventPreviousValues {
  id: ID!
  title: String!
  subtitle: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventWhereInput
  AND: [EventSubscriptionWhereInput!]
  OR: [EventSubscriptionWhereInput!]
  NOT: [EventSubscriptionWhereInput!]
}

input EventUpdateInput {
  title: String
  subtitle: String
}

input EventUpdateManyMutationInput {
  title: String
  subtitle: String
}

input EventWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  subtitle: String
  subtitle_not: String
  subtitle_in: [String!]
  subtitle_not_in: [String!]
  subtitle_lt: String
  subtitle_lte: String
  subtitle_gt: String
  subtitle_gte: String
  subtitle_contains: String
  subtitle_not_contains: String
  subtitle_starts_with: String
  subtitle_not_starts_with: String
  subtitle_ends_with: String
  subtitle_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
}

input EventWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createEvent(data: EventCreateInput!): Event!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  createPeople(data: PeopleCreateInput!): People!
  updatePeople(data: PeopleUpdateInput!, where: PeopleWhereUniqueInput!): People
  updateManyPeoples(data: PeopleUpdateManyMutationInput!, where: PeopleWhereInput): BatchPayload!
  upsertPeople(where: PeopleWhereUniqueInput!, create: PeopleCreateInput!, update: PeopleUpdateInput!): People!
  deletePeople(where: PeopleWhereUniqueInput!): People
  deleteManyPeoples(where: PeopleWhereInput): BatchPayload!
  createShip(data: ShipCreateInput!): Ship!
  updateShip(data: ShipUpdateInput!, where: ShipWhereUniqueInput!): Ship
  updateManyShips(data: ShipUpdateManyMutationInput!, where: ShipWhereInput): BatchPayload!
  upsertShip(where: ShipWhereUniqueInput!, create: ShipCreateInput!, update: ShipUpdateInput!): Ship!
  deleteShip(where: ShipWhereUniqueInput!): Ship
  deleteManyShips(where: ShipWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type People {
  id: ID!
  name: String!
  nation: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type PeopleConnection {
  pageInfo: PageInfo!
  edges: [PeopleEdge]!
  aggregate: AggregatePeople!
}

input PeopleCreateInput {
  id: ID
  name: String!
  nation: String!
}

type PeopleEdge {
  node: People!
  cursor: String!
}

enum PeopleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  nation_ASC
  nation_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PeoplePreviousValues {
  id: ID!
  name: String!
  nation: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type PeopleSubscriptionPayload {
  mutation: MutationType!
  node: People
  updatedFields: [String!]
  previousValues: PeoplePreviousValues
}

input PeopleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PeopleWhereInput
  AND: [PeopleSubscriptionWhereInput!]
  OR: [PeopleSubscriptionWhereInput!]
  NOT: [PeopleSubscriptionWhereInput!]
}

input PeopleUpdateInput {
  name: String
  nation: String
}

input PeopleUpdateManyMutationInput {
  name: String
  nation: String
}

input PeopleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  nation: String
  nation_not: String
  nation_in: [String!]
  nation_not_in: [String!]
  nation_lt: String
  nation_lte: String
  nation_gt: String
  nation_gte: String
  nation_contains: String
  nation_not_contains: String
  nation_starts_with: String
  nation_not_starts_with: String
  nation_ends_with: String
  nation_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [PeopleWhereInput!]
  OR: [PeopleWhereInput!]
  NOT: [PeopleWhereInput!]
}

input PeopleWhereUniqueInput {
  id: ID
}

type Query {
  event(where: EventWhereUniqueInput!): Event
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  people(where: PeopleWhereUniqueInput!): People
  peoples(where: PeopleWhereInput, orderBy: PeopleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [People]!
  peoplesConnection(where: PeopleWhereInput, orderBy: PeopleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PeopleConnection!
  ship(where: ShipWhereUniqueInput!): Ship
  ships(where: ShipWhereInput, orderBy: ShipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ship]!
  shipsConnection(where: ShipWhereInput, orderBy: ShipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShipConnection!
  node(id: ID!): Node
}

type Ship {
  id: ID!
  name: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type ShipConnection {
  pageInfo: PageInfo!
  edges: [ShipEdge]!
  aggregate: AggregateShip!
}

input ShipCreateInput {
  id: ID
  name: String!
}

type ShipEdge {
  node: Ship!
  cursor: String!
}

enum ShipOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ShipPreviousValues {
  id: ID!
  name: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type ShipSubscriptionPayload {
  mutation: MutationType!
  node: Ship
  updatedFields: [String!]
  previousValues: ShipPreviousValues
}

input ShipSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShipWhereInput
  AND: [ShipSubscriptionWhereInput!]
  OR: [ShipSubscriptionWhereInput!]
  NOT: [ShipSubscriptionWhereInput!]
}

input ShipUpdateInput {
  name: String
}

input ShipUpdateManyMutationInput {
  name: String
}

input ShipWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ShipWhereInput!]
  OR: [ShipWhereInput!]
  NOT: [ShipWhereInput!]
}

input ShipWhereUniqueInput {
  id: ID
}

type Subscription {
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  people(where: PeopleSubscriptionWhereInput): PeopleSubscriptionPayload
  ship(where: ShipSubscriptionWhereInput): ShipSubscriptionPayload
}
`
      }
    